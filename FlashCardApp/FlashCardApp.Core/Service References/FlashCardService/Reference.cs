//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34003
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FlashCardApp.Core.FlashCardService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceFlashCardSet", Namespace="http://schemas.datacontract.org/2004/07/FlashCardTestService.Entities")]
    public partial class ServiceFlashCardSet : object, System.ComponentModel.INotifyPropertyChanged {
        
        private FlashCardApp.Core.FlashCardService.ServiceFlashCard[] FlashCardsField;
        
        private int IDField;
        
        private string SetNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public FlashCardApp.Core.FlashCardService.ServiceFlashCard[] FlashCards {
            get {
                return this.FlashCardsField;
            }
            set {
                if ((object.ReferenceEquals(this.FlashCardsField, value) != true)) {
                    this.FlashCardsField = value;
                    this.RaisePropertyChanged("FlashCards");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SetName {
            get {
                return this.SetNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SetNameField, value) != true)) {
                    this.SetNameField = value;
                    this.RaisePropertyChanged("SetName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceFlashCard", Namespace="http://schemas.datacontract.org/2004/07/FlashCardTestService.Entities")]
    public partial class ServiceFlashCard : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string DefinitionField;
        
        private int IDField;
        
        private string PinyinField;
        
        private int SetIDField;
        
        private string SimplifiedField;
        
        private string TraditionalField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Definition {
            get {
                return this.DefinitionField;
            }
            set {
                if ((object.ReferenceEquals(this.DefinitionField, value) != true)) {
                    this.DefinitionField = value;
                    this.RaisePropertyChanged("Definition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Pinyin {
            get {
                return this.PinyinField;
            }
            set {
                if ((object.ReferenceEquals(this.PinyinField, value) != true)) {
                    this.PinyinField = value;
                    this.RaisePropertyChanged("Pinyin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SetID {
            get {
                return this.SetIDField;
            }
            set {
                if ((this.SetIDField.Equals(value) != true)) {
                    this.SetIDField = value;
                    this.RaisePropertyChanged("SetID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Simplified {
            get {
                return this.SimplifiedField;
            }
            set {
                if ((object.ReferenceEquals(this.SimplifiedField, value) != true)) {
                    this.SimplifiedField = value;
                    this.RaisePropertyChanged("Simplified");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Traditional {
            get {
                return this.TraditionalField;
            }
            set {
                if ((object.ReferenceEquals(this.TraditionalField, value) != true)) {
                    this.TraditionalField = value;
                    this.RaisePropertyChanged("Traditional");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FlashCardService.IFlashCardService")]
    public interface IFlashCardService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IFlashCardService/CreateUser", ReplyAction="http://tempuri.org/IFlashCardService/CreateUserResponse")]
        System.IAsyncResult BeginCreateUser(FlashCardApp.Core.FlashCardService.CreateUserRequest request, System.AsyncCallback callback, object asyncState);
        
        FlashCardApp.Core.FlashCardService.CreateUserResponse EndCreateUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IFlashCardService/GetSets", ReplyAction="http://tempuri.org/IFlashCardService/GetSetsResponse")]
        System.IAsyncResult BeginGetSets(FlashCardApp.Core.FlashCardService.GetSetsRequest request, System.AsyncCallback callback, object asyncState);
        
        FlashCardApp.Core.FlashCardService.GetSetsResponse EndGetSets(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IFlashCardService/UploadSets", ReplyAction="http://tempuri.org/IFlashCardService/UploadSetsResponse")]
        System.IAsyncResult BeginUploadSets(FlashCardApp.Core.FlashCardService.UploadSetsRequest request, System.AsyncCallback callback, object asyncState);
        
        FlashCardApp.Core.FlashCardService.UploadSetsResponse EndUploadSets(System.IAsyncResult result);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CreateUser", WrapperNamespace="http://tempuri.org/")]
    public partial class CreateUserRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string emailAddress;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string password;
        
        public CreateUserRequest() {
        }
        
        public CreateUserRequest(string emailAddress, string password) {
            this.emailAddress = emailAddress;
            this.password = password;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CreateUserResponse", WrapperNamespace="http://tempuri.org/")]
    public partial class CreateUserResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool CreateUserResult;
        
        public CreateUserResponse() {
        }
        
        public CreateUserResponse(bool CreateUserResult) {
            this.CreateUserResult = CreateUserResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetSets", WrapperNamespace="http://tempuri.org/")]
    public partial class GetSetsRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string userEmailAdress;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string password;
        
        public GetSetsRequest() {
        }
        
        public GetSetsRequest(string userEmailAdress, string password) {
            this.userEmailAdress = userEmailAdress;
            this.password = password;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetSetsResponse", WrapperNamespace="http://tempuri.org/")]
    public partial class GetSetsResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public FlashCardApp.Core.FlashCardService.ServiceFlashCardSet[] GetSetsResult;
        
        public GetSetsResponse() {
        }
        
        public GetSetsResponse(FlashCardApp.Core.FlashCardService.ServiceFlashCardSet[] GetSetsResult) {
            this.GetSetsResult = GetSetsResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadSets", WrapperNamespace="http://tempuri.org/")]
    public partial class UploadSetsRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public FlashCardApp.Core.FlashCardService.ServiceFlashCardSet[] serviceSets;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string userEmailAddress;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string password;
        
        public UploadSetsRequest() {
        }
        
        public UploadSetsRequest(FlashCardApp.Core.FlashCardService.ServiceFlashCardSet[] serviceSets, string userEmailAddress, string password) {
            this.serviceSets = serviceSets;
            this.userEmailAddress = userEmailAddress;
            this.password = password;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadSetsResponse", WrapperNamespace="http://tempuri.org/")]
    public partial class UploadSetsResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool UploadSetsResult;
        
        public UploadSetsResponse() {
        }
        
        public UploadSetsResponse(bool UploadSetsResult) {
            this.UploadSetsResult = UploadSetsResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFlashCardServiceChannel : FlashCardApp.Core.FlashCardService.IFlashCardService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CreateUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CreateUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public FlashCardApp.Core.FlashCardService.CreateUserResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((FlashCardApp.Core.FlashCardService.CreateUserResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSetsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSetsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public FlashCardApp.Core.FlashCardService.GetSetsResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((FlashCardApp.Core.FlashCardService.GetSetsResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UploadSetsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UploadSetsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public FlashCardApp.Core.FlashCardService.UploadSetsResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((FlashCardApp.Core.FlashCardService.UploadSetsResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FlashCardServiceClient : System.ServiceModel.ClientBase<FlashCardApp.Core.FlashCardService.IFlashCardService>, FlashCardApp.Core.FlashCardService.IFlashCardService {
        
        private BeginOperationDelegate onBeginCreateUserDelegate;
        
        private EndOperationDelegate onEndCreateUserDelegate;
        
        private System.Threading.SendOrPostCallback onCreateUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetSetsDelegate;
        
        private EndOperationDelegate onEndGetSetsDelegate;
        
        private System.Threading.SendOrPostCallback onGetSetsCompletedDelegate;
        
        private BeginOperationDelegate onBeginUploadSetsDelegate;
        
        private EndOperationDelegate onEndUploadSetsDelegate;
        
        private System.Threading.SendOrPostCallback onUploadSetsCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public FlashCardServiceClient() : 
                base(FlashCardServiceClient.GetDefaultBinding(), FlashCardServiceClient.GetDefaultEndpointAddress()) {
        }
        
        public FlashCardServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(FlashCardServiceClient.GetBindingForEndpoint(endpointConfiguration), FlashCardServiceClient.GetEndpointAddress(endpointConfiguration)) {
        }
        
        public FlashCardServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(FlashCardServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
        }
        
        public FlashCardServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(FlashCardServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
        }
        
        public FlashCardServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<CreateUserCompletedEventArgs> CreateUserCompleted;
        
        public event System.EventHandler<GetSetsCompletedEventArgs> GetSetsCompleted;
        
        public event System.EventHandler<UploadSetsCompletedEventArgs> UploadSetsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult FlashCardApp.Core.FlashCardService.IFlashCardService.BeginCreateUser(FlashCardApp.Core.FlashCardService.CreateUserRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateUser(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        FlashCardApp.Core.FlashCardService.CreateUserResponse FlashCardApp.Core.FlashCardService.IFlashCardService.EndCreateUser(System.IAsyncResult result) {
            return base.Channel.EndCreateUser(result);
        }
        
        private System.IAsyncResult OnBeginCreateUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            FlashCardApp.Core.FlashCardService.CreateUserRequest request = ((FlashCardApp.Core.FlashCardService.CreateUserRequest)(inValues[0]));
            return ((FlashCardApp.Core.FlashCardService.IFlashCardService)(this)).BeginCreateUser(request, callback, asyncState);
        }
        
        private object[] OnEndCreateUser(System.IAsyncResult result) {
            FlashCardApp.Core.FlashCardService.CreateUserResponse retVal = ((FlashCardApp.Core.FlashCardService.IFlashCardService)(this)).EndCreateUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCreateUserCompleted(object state) {
            if ((this.CreateUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateUserCompleted(this, new CreateUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateUserAsync(FlashCardApp.Core.FlashCardService.CreateUserRequest request) {
            this.CreateUserAsync(request, null);
        }
        
        public void CreateUserAsync(FlashCardApp.Core.FlashCardService.CreateUserRequest request, object userState) {
            if ((this.onBeginCreateUserDelegate == null)) {
                this.onBeginCreateUserDelegate = new BeginOperationDelegate(this.OnBeginCreateUser);
            }
            if ((this.onEndCreateUserDelegate == null)) {
                this.onEndCreateUserDelegate = new EndOperationDelegate(this.OnEndCreateUser);
            }
            if ((this.onCreateUserCompletedDelegate == null)) {
                this.onCreateUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateUserCompleted);
            }
            base.InvokeAsync(this.onBeginCreateUserDelegate, new object[] {
                        request}, this.onEndCreateUserDelegate, this.onCreateUserCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult FlashCardApp.Core.FlashCardService.IFlashCardService.BeginGetSets(FlashCardApp.Core.FlashCardService.GetSetsRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSets(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        FlashCardApp.Core.FlashCardService.GetSetsResponse FlashCardApp.Core.FlashCardService.IFlashCardService.EndGetSets(System.IAsyncResult result) {
            return base.Channel.EndGetSets(result);
        }
        
        private System.IAsyncResult OnBeginGetSets(object[] inValues, System.AsyncCallback callback, object asyncState) {
            FlashCardApp.Core.FlashCardService.GetSetsRequest request = ((FlashCardApp.Core.FlashCardService.GetSetsRequest)(inValues[0]));
            return ((FlashCardApp.Core.FlashCardService.IFlashCardService)(this)).BeginGetSets(request, callback, asyncState);
        }
        
        private object[] OnEndGetSets(System.IAsyncResult result) {
            FlashCardApp.Core.FlashCardService.GetSetsResponse retVal = ((FlashCardApp.Core.FlashCardService.IFlashCardService)(this)).EndGetSets(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSetsCompleted(object state) {
            if ((this.GetSetsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSetsCompleted(this, new GetSetsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSetsAsync(FlashCardApp.Core.FlashCardService.GetSetsRequest request) {
            this.GetSetsAsync(request, null);
        }
        
        public void GetSetsAsync(FlashCardApp.Core.FlashCardService.GetSetsRequest request, object userState) {
            if ((this.onBeginGetSetsDelegate == null)) {
                this.onBeginGetSetsDelegate = new BeginOperationDelegate(this.OnBeginGetSets);
            }
            if ((this.onEndGetSetsDelegate == null)) {
                this.onEndGetSetsDelegate = new EndOperationDelegate(this.OnEndGetSets);
            }
            if ((this.onGetSetsCompletedDelegate == null)) {
                this.onGetSetsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSetsCompleted);
            }
            base.InvokeAsync(this.onBeginGetSetsDelegate, new object[] {
                        request}, this.onEndGetSetsDelegate, this.onGetSetsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult FlashCardApp.Core.FlashCardService.IFlashCardService.BeginUploadSets(FlashCardApp.Core.FlashCardService.UploadSetsRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUploadSets(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        FlashCardApp.Core.FlashCardService.UploadSetsResponse FlashCardApp.Core.FlashCardService.IFlashCardService.EndUploadSets(System.IAsyncResult result) {
            return base.Channel.EndUploadSets(result);
        }
        
        private System.IAsyncResult OnBeginUploadSets(object[] inValues, System.AsyncCallback callback, object asyncState) {
            FlashCardApp.Core.FlashCardService.UploadSetsRequest request = ((FlashCardApp.Core.FlashCardService.UploadSetsRequest)(inValues[0]));
            return ((FlashCardApp.Core.FlashCardService.IFlashCardService)(this)).BeginUploadSets(request, callback, asyncState);
        }
        
        private object[] OnEndUploadSets(System.IAsyncResult result) {
            FlashCardApp.Core.FlashCardService.UploadSetsResponse retVal = ((FlashCardApp.Core.FlashCardService.IFlashCardService)(this)).EndUploadSets(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUploadSetsCompleted(object state) {
            if ((this.UploadSetsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UploadSetsCompleted(this, new UploadSetsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UploadSetsAsync(FlashCardApp.Core.FlashCardService.UploadSetsRequest request) {
            this.UploadSetsAsync(request, null);
        }
        
        public void UploadSetsAsync(FlashCardApp.Core.FlashCardService.UploadSetsRequest request, object userState) {
            if ((this.onBeginUploadSetsDelegate == null)) {
                this.onBeginUploadSetsDelegate = new BeginOperationDelegate(this.OnBeginUploadSets);
            }
            if ((this.onEndUploadSetsDelegate == null)) {
                this.onEndUploadSetsDelegate = new EndOperationDelegate(this.OnEndUploadSets);
            }
            if ((this.onUploadSetsCompletedDelegate == null)) {
                this.onUploadSetsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUploadSetsCompleted);
            }
            base.InvokeAsync(this.onBeginUploadSetsDelegate, new object[] {
                        request}, this.onEndUploadSetsDelegate, this.onUploadSetsCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override FlashCardApp.Core.FlashCardService.IFlashCardService CreateChannel() {
            return new FlashCardServiceClientChannel(this);
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IFlashCardService)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.MaxReceivedMessageSize = int.MaxValue;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IFlashCardService)) {
                return new System.ServiceModel.EndpointAddress("http://localhost:60710/FlashCardService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return FlashCardServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IFlashCardService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return FlashCardServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IFlashCardService);
        }
        
        private class FlashCardServiceClientChannel : ChannelBase<FlashCardApp.Core.FlashCardService.IFlashCardService>, FlashCardApp.Core.FlashCardService.IFlashCardService {
            
            public FlashCardServiceClientChannel(System.ServiceModel.ClientBase<FlashCardApp.Core.FlashCardService.IFlashCardService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginCreateUser(FlashCardApp.Core.FlashCardService.CreateUserRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("CreateUser", _args, callback, asyncState);
                return _result;
            }
            
            public FlashCardApp.Core.FlashCardService.CreateUserResponse EndCreateUser(System.IAsyncResult result) {
                object[] _args = new object[0];
                FlashCardApp.Core.FlashCardService.CreateUserResponse _result = ((FlashCardApp.Core.FlashCardService.CreateUserResponse)(base.EndInvoke("CreateUser", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetSets(FlashCardApp.Core.FlashCardService.GetSetsRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("GetSets", _args, callback, asyncState);
                return _result;
            }
            
            public FlashCardApp.Core.FlashCardService.GetSetsResponse EndGetSets(System.IAsyncResult result) {
                object[] _args = new object[0];
                FlashCardApp.Core.FlashCardService.GetSetsResponse _result = ((FlashCardApp.Core.FlashCardService.GetSetsResponse)(base.EndInvoke("GetSets", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUploadSets(FlashCardApp.Core.FlashCardService.UploadSetsRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("UploadSets", _args, callback, asyncState);
                return _result;
            }
            
            public FlashCardApp.Core.FlashCardService.UploadSetsResponse EndUploadSets(System.IAsyncResult result) {
                object[] _args = new object[0];
                FlashCardApp.Core.FlashCardService.UploadSetsResponse _result = ((FlashCardApp.Core.FlashCardService.UploadSetsResponse)(base.EndInvoke("UploadSets", _args, result)));
                return _result;
            }
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_IFlashCardService,
        }
    }
}
