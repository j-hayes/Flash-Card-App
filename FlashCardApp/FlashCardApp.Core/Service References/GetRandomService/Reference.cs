//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18051
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FlashCardApp.Core.GetRandomService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Service_FlashCardSet", Namespace="http://schemas.datacontract.org/2004/07/FlashCardApp.Core.Entities")]
    public partial class Service_FlashCardSet : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int IDField;
        
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="GetRandomService.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/GetRandom", ReplyAction="http://tempuri.org/IService1/GetRandomResponse")]
        System.IAsyncResult BeginGetRandom(System.AsyncCallback callback, object asyncState);
        
        string EndGetRandom(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/GetSets", ReplyAction="http://tempuri.org/IService1/GetSetsResponse")]
        System.IAsyncResult BeginGetSets(System.AsyncCallback callback, object asyncState);
        
        FlashCardApp.Core.GetRandomService.Service_FlashCardSet[] EndGetSets(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : FlashCardApp.Core.GetRandomService.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetRandomCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetRandomCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSetsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSetsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public FlashCardApp.Core.GetRandomService.Service_FlashCardSet[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((FlashCardApp.Core.GetRandomService.Service_FlashCardSet[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<FlashCardApp.Core.GetRandomService.IService1>, FlashCardApp.Core.GetRandomService.IService1 {
        
        private BeginOperationDelegate onBeginGetRandomDelegate;
        
        private EndOperationDelegate onEndGetRandomDelegate;
        
        private System.Threading.SendOrPostCallback onGetRandomCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetSetsDelegate;
        
        private EndOperationDelegate onEndGetSetsDelegate;
        
        private System.Threading.SendOrPostCallback onGetSetsCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public Service1Client() : 
                base(Service1Client.GetDefaultBinding(), Service1Client.GetDefaultEndpointAddress()) {
        }
        
        public Service1Client(EndpointConfiguration endpointConfiguration) : 
                base(Service1Client.GetBindingForEndpoint(endpointConfiguration), Service1Client.GetEndpointAddress(endpointConfiguration)) {
        }
        
        public Service1Client(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(Service1Client.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
        }
        
        public Service1Client(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(Service1Client.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetRandomCompletedEventArgs> GetRandomCompleted;
        
        public event System.EventHandler<GetSetsCompletedEventArgs> GetSetsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult FlashCardApp.Core.GetRandomService.IService1.BeginGetRandom(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetRandom(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string FlashCardApp.Core.GetRandomService.IService1.EndGetRandom(System.IAsyncResult result) {
            return base.Channel.EndGetRandom(result);
        }
        
        private System.IAsyncResult OnBeginGetRandom(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((FlashCardApp.Core.GetRandomService.IService1)(this)).BeginGetRandom(callback, asyncState);
        }
        
        private object[] OnEndGetRandom(System.IAsyncResult result) {
            string retVal = ((FlashCardApp.Core.GetRandomService.IService1)(this)).EndGetRandom(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetRandomCompleted(object state) {
            if ((this.GetRandomCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetRandomCompleted(this, new GetRandomCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetRandomAsync() {
            this.GetRandomAsync(null);
        }
        
        public void GetRandomAsync(object userState) {
            if ((this.onBeginGetRandomDelegate == null)) {
                this.onBeginGetRandomDelegate = new BeginOperationDelegate(this.OnBeginGetRandom);
            }
            if ((this.onEndGetRandomDelegate == null)) {
                this.onEndGetRandomDelegate = new EndOperationDelegate(this.OnEndGetRandom);
            }
            if ((this.onGetRandomCompletedDelegate == null)) {
                this.onGetRandomCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRandomCompleted);
            }
            base.InvokeAsync(this.onBeginGetRandomDelegate, null, this.onEndGetRandomDelegate, this.onGetRandomCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult FlashCardApp.Core.GetRandomService.IService1.BeginGetSets(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSets(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        FlashCardApp.Core.GetRandomService.Service_FlashCardSet[] FlashCardApp.Core.GetRandomService.IService1.EndGetSets(System.IAsyncResult result) {
            return base.Channel.EndGetSets(result);
        }
        
        private System.IAsyncResult OnBeginGetSets(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((FlashCardApp.Core.GetRandomService.IService1)(this)).BeginGetSets(callback, asyncState);
        }
        
        private object[] OnEndGetSets(System.IAsyncResult result) {
            FlashCardApp.Core.GetRandomService.Service_FlashCardSet[] retVal = ((FlashCardApp.Core.GetRandomService.IService1)(this)).EndGetSets(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSetsCompleted(object state) {
            if ((this.GetSetsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSetsCompleted(this, new GetSetsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSetsAsync() {
            this.GetSetsAsync(null);
        }
        
        public void GetSetsAsync(object userState) {
            if ((this.onBeginGetSetsDelegate == null)) {
                this.onBeginGetSetsDelegate = new BeginOperationDelegate(this.OnBeginGetSets);
            }
            if ((this.onEndGetSetsDelegate == null)) {
                this.onEndGetSetsDelegate = new EndOperationDelegate(this.OnEndGetSets);
            }
            if ((this.onGetSetsCompletedDelegate == null)) {
                this.onGetSetsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSetsCompleted);
            }
            base.InvokeAsync(this.onBeginGetSetsDelegate, null, this.onEndGetSetsDelegate, this.onGetSetsCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override FlashCardApp.Core.GetRandomService.IService1 CreateChannel() {
            return new Service1ClientChannel(this);
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IService1)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.MaxReceivedMessageSize = int.MaxValue;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IService1)) {
                return new System.ServiceModel.EndpointAddress("http://testrandomnumberjackson.cloudapp.net/Service1.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return Service1Client.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IService1);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return Service1Client.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IService1);
        }
        
        private class Service1ClientChannel : ChannelBase<FlashCardApp.Core.GetRandomService.IService1>, FlashCardApp.Core.GetRandomService.IService1 {
            
            public Service1ClientChannel(System.ServiceModel.ClientBase<FlashCardApp.Core.GetRandomService.IService1> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetRandom(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetRandom", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetRandom(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetRandom", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetSets(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetSets", _args, callback, asyncState);
                return _result;
            }
            
            public FlashCardApp.Core.GetRandomService.Service_FlashCardSet[] EndGetSets(System.IAsyncResult result) {
                object[] _args = new object[0];
                FlashCardApp.Core.GetRandomService.Service_FlashCardSet[] _result = ((FlashCardApp.Core.GetRandomService.Service_FlashCardSet[])(base.EndInvoke("GetSets", _args, result)));
                return _result;
            }
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_IService1,
        }
    }
}
